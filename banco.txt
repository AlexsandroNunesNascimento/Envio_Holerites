Guia Completo de Configuração do Backend (Banco de Dados e API) - Sistema de Holerites
Este documento detalha todos os passos para configurar o backend do sistema na plataforma Supabase, incluindo o banco de dados, o armazenamento de arquivos, as regras de segurança e a API de limpeza automática. Nenhuma ferramenta de linha de comando (CLI) é necessária.

Parte 1: Configuração do Banco de Dados e Armazenamento
Esta seção cobre a criação de toda a estrutura de dados necessária.

Passo 1: Criar as Tabelas Iniciais
No painel do seu projeto Supabase, navegue até SQL Editor (ícone de banco de dados). Crie e execute uma nova query com o código abaixo para criar as tabelas administrador e funcionario.

-- Cria a tabela para os administradores do sistema
CREATE TABLE public.administrador (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  senha TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Cria a tabela para os funcionários
CREATE TABLE public.funcionario (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome TEXT NOT NULL,
  cpf VARCHAR(14) UNIQUE NOT NULL,
  loja TEXT NOT NULL,
  senha TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

Passo 2: Criar a Tabela de Holerites (Versão Corrigida)
Execute uma nova query para criar a tabela holerites. Esta versão já está corrigida para permitir que a funcionalidade de limpeza funcione corretamente.

-- Cria a tabela para armazenar o histórico de holerites
CREATE TABLE public.holerites (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  funcionario_id BIGINT NOT NULL REFERENCES public.funcionario(id) ON DELETE CASCADE,
  mes_referencia DATE NOT NULL,
  -- MUDANÇA IMPORTANTE: "NOT NULL" foi removido daqui para permitir a limpeza futura dos arquivos.
  pdf_path TEXT,
  uploaded_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

Passo 3: Criar o Local de Armazenamento (Bucket)
No menu esquerdo, vá para Storage (ícone de pasta).
Clique em "Create a new bucket".
No nome do bucket, digite exatamente: holerites
IMPORTANTE: Deixe a opção "Public bucket" desligada (desmarcada).
Clique em "Create bucket".

Passo 4: Adicionar a Coluna de Rastreamento de Download
Volte ao SQL Editor e execute o seguinte comando para adicionar a coluna que registrará o download.

-- Adiciona a coluna 'data_download' à tabela 'holerites'
ALTER TABLE public.holerites
ADD COLUMN data_download TIMESTAMPTZ;

Passo 5: Configurar as Regras de Segurança (Policies)
Ainda no SQL Editor, execute todo o bloco de código abaixo de uma só vez para ativar e criar todas as regras de acesso necessárias para o sistema e o storage.

-- Habilita a segurança em nível de linha (RLS) para todas as tabelas
ALTER TABLE public.administrador ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.funcionario ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.holerites ENABLE ROW LEVEL SECURITY;

-- Cria as políticas de acesso às tabelas, permitindo acesso total
CREATE POLICY "Acesso total para administradores" ON public.administrador FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Acesso total para funcionarios" ON public.funcionario FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Acesso total para holerites" ON public.holerites FOR ALL USING (true) WITH CHECK (true);

-- Cria as políticas de acesso ao Storage (armazenamento de arquivos)
CREATE POLICY "Permitir uploads no bucket holerites" ON storage.objects FOR INSERT WITH CHECK (bucket_id = 'holerites');
CREATE POLICY "Permitir downloads do bucket holerites" ON storage.objects FOR SELECT USING (bucket_id = 'holerites');
```*Observação:* Se você estiver trabalhando em um banco antigo onde `pdf_path` tinha a restrição `NOT NULL`, execute o seguinte comando para corrigi-lo:
`ALTER TABLE public.holerites ALTER COLUMN pdf_path DROP NOT NULL;`

---
### **Parte 2: Script Único para Configuração Rápida (Versão Final)**

Para facilitar a criação de um novo projeto, este script único contém todos os comandos da Parte 1, já com as correções aplicadas.

```sql
-- =================================================================================
-- SCRIPT COMPLETO E FINAL DE CONFIGURAÇÃO DO BANCO - SISTEMA HOLERITE
-- =================================================================================

-- Tabela 1: Administradores do Sistema
CREATE TABLE public.administrador (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  senha TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela 2: Funcionários
CREATE TABLE public.funcionario (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  nome TEXT NOT NULL,
  cpf VARCHAR(14) UNIQUE NOT NULL,
  loja TEXT NOT NULL,
  senha TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Tabela 3: Histórico de Holerites (vinculada aos funcionários e corrigida)
CREATE TABLE public.holerites (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  funcionario_id BIGINT NOT NULL REFERENCES public.funcionario(id) ON DELETE CASCADE,
  mes_referencia DATE NOT NULL,
  pdf_path TEXT, -- Sem "NOT NULL" para permitir a limpeza
  uploaded_at TIMESTAMPTZ DEFAULT now() NOT NULL
);

-- Adiciona a coluna para rastrear a data e hora do download
ALTER TABLE public.holerites
ADD COLUMN data_download TIMESTAMPTZ;

-- Habilita a segurança em nível de linha (RLS) para todas as tabelas
ALTER TABLE public.administrador ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.funcionario ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.holerites ENABLE ROW LEVEL SECURITY;

-- Cria as Políticas de acesso às tabelas
CREATE POLICY "Acesso total para administradores" ON public.administrador FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Acesso total para funcionarios" ON public.funcionario FOR ALL USING (true) WITH CHECK (true);
CREATE POLICY "Acesso total para holerites" ON public.holerites FOR ALL USING (true) WITH CHECK (true);

-- Cria as Políticas de acesso ao Storage
CREATE POLICY "Permitir uploads no bucket holerites" ON storage.objects FOR INSERT WITH CHECK (bucket_id = 'holerites');
CREATE POLICY "Permitir downloads do bucket holerites" ON storage.objects FOR SELECT USING (bucket_id = 'holerites');

Parte 3: Criação da API de Limpeza (Edge Function)
Esta API ("robô de limpeza") será chamada pelo botão no painel de admin para remover holerites com mais de 6 meses.

Passo 1: Criar a Função no Painel
No menu do Supabase, clique em Edge Functions (ícone de raio ⚡).
Clique no botão "Create a function".
No campo Function name, digite o nome exato: cleanup-storage
Clique em "Create function".

Passo 2: Inserir o Código da Função
Você será direcionado a um editor de código.
APAGUE todo o código padrão que estiver no editor.
COLE o código completo abaixo:

import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

// Define os headers de CORS para permitir a comunicação com seu site.
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

console.log("Função de Limpeza foi chamada.")

Deno.serve(async (req) => {
  // Responde à requisição de verificação CORS do navegador
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Cria um cliente Supabase com permissões totais de administrador
    const supabaseAdmin = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // 1. Calcula a data limite para a limpeza (6 meses atrás)
    const hoje = new Date();
    hoje.setDate(1); 
    hoje.setMonth(hoje.getMonth() - 6);
    const dataLimite = hoje.toISOString();

    // 2. Busca holerites antigos que ainda possuem um arquivo PDF
    const { data: holeritesAntigos, error: selectError } = await supabaseAdmin
      .from('holerites')
      .select('id, pdf_path')
      .lt('mes_referencia', dataLimite)
      .not('pdf_path', 'is', null);

    if (selectError) throw selectError;

    // 3. Verifica se encontrou algo para limpar
    if (!holeritesAntigos || holeritesAntigos.length === 0) {
      const message = "Nenhum holerite com mais de 6 meses encontrado para limpar.";
      return new Response(JSON.stringify({ message }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 200 });
    }
    
    // 4. Prepara as listas para deletar os arquivos e atualizar o banco
    const caminhosParaDeletar = holeritesAntigos.map(h => h.pdf_path);
    const idsParaAtualizar = holeritesAntigos.map(h => h.id);

    // 5. Deleta os arquivos do Storage
    const { error: storageError } = await supabaseAdmin.storage.from('holerites').remove(caminhosParaDeletar);
    if (storageError) throw storageError;

    // 6. Atualiza o banco, definindo pdf_path como nulo
    const { error: updateError } = await supabaseAdmin.from('holerites').update({ pdf_path: null }).in('id', idsParaAtualizar);
    if (updateError) throw updateError;
    
    // 7. Responde com sucesso
    const successMessage = `Sucesso! ${caminhosParaDeletar.length} arquivo(s) antigo(s) foi(ram) removido(s).`;
    return new Response(JSON.stringify({ message: successMessage }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 200 });

  } catch (error) {
    return new Response(JSON.stringify({ error: error.message }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 });
  }
});

Passo 3: Configurar o Segredo de Segurança
A função precisa da "chave mestra" para operar com privilégios de administrador.
Vá em Project Settings (ícone de engrenagem) > API.
Role para baixo e copie a chave service_role (a secreta).
Volte para Edge Functions (⚡) > Secrets.
Clique em "Add new secret":
Name: SUPABASE_SERVICE_ROLE_KEY
Value: Cole a chave que você copiou.
Clique em Create Secret.

Passo 4: Publicar (Deploy)
Volte para a edição da sua função cleanup-storage.
Clique no botão "Save and deploy" no canto superior direito.
Após estes passos, a API estará ativa e pronta para ser chamada pelo seu painel de administração.